#! /usr/bin/python3

'''
Примеры работы с модулем Flask.
Flask    - это микрофреймворк для Python на основе Werkzeug, Jinja 2 имеющий встроенный веб-сервер.
Jinja 2  - шаблонизатор.
Werkzeug - Flask построен на основе это очень мощной библиотеки, это модулья для отладки и
формирования страниц, с отладочной информацией.

Сайты для изучения:
    https://trytoguide.me/post/9
    https://code.tutsplus.com/ru/tutorials/creating-a-web-app-from-scratch-using-python-flask-and-mysql--cms-22972
    https://habr.com/ru/post/346306/
    https://pythonru.com/uroki/3-osnovy-flask

Чем же так хорош Flask?
    - Запуск свои скриптов через интернет, без переписывания своих скрптов.
    - Скорость разработки


Выполнив код ниже, сайт будет запущен локально, на порту 5000 то к этому сайт можно
обратиться по следующим адресам:
    127.0.0.1:5000
    localhost:5000

После этого нам может понадовиться выложить сайт в открытый доступ, для этого используем

программу ngrok  - это платформа, которая с помощью установленной утилиты, позволяет,
организовать удалённый доступ на веб-сервер или какой-то другой сервис, запущенный ПК.
Доступ организуется через созданный при запуске ngrok безопасный туннель

Официальный сайт - https://ngrok.com/download

По сути это утилита, которая может расшарить localhost на весь интернет. Но это не единственный
способ расшарить свой сайт. Есть еше: no-ip, ProxyLocal, LocalTunnel. Но ngrok более стабилен
и имеет больший функционал.

ngrok - работает на Linux, Mac OS X и Windows и без регистрации, но с регистрацией появятся новые
возможности, а именно:
    1) -  Доступ через SSL
            curl https://myapp.ngrok.com
    2) - Защита туннеля паролем
            ngrok -httpauth "user:password" 8080
    3) - Поддомены на выбор, с резервированием на будущее
            ngrok -subdomain myapp 8080
    4) - Туннелирование TCP и UDP
            ngrok - proto tcp 8080

Качаем ngrok с официального сайта, и устанавливаем его в /usr/bin/ngrok
Если зарегестрировались то соединяемся с акаунтом:
    ./ngrok authtoken <YOUR_AUTH_TOKEN>
Далее запускаем наш сайт локально, и только после этого пробросим порт
в открытый мир, при помощи команды:
    ngork http 5000
где 5000 это указание порта, который мы прокидываем. Далее программа отобразит
нам отладочную информацию, с указанием доступов к сайту как по http так и https:

Web Interface                 http://127.0.0.1:4040
Forwarding                    http://a93fb4147404.ngrok.io  -> http://localhost:5000
Forwarding                    https://a93fb4147404.ngrok.io -> http://localhost:5000

Наш сайт получил название: a93fb4147404.ngrok.io
Также мы можем увидить отладочную информацию на нашем локальном порту http://127.0.0.1:4040
Также каждое подобное подключение имеет время своей сессии
    Session Expires по умолчанию равное 8 часов.
Также каждый запрос к нашему сайту, со всеми параметрами будет отображен в отладке.

Выйти и закрыть можно через Ctrl+C

Мы можем использовать систему авторизации http для этого надо будет зарегестрироваться,
и получить наш ТОКЕН_ДЛЯ_АВТОРИЗАЦИИ.

После выполним след команду:
    ngrok authtoken 1dTAdyznXV501tyHdfgVxPfghGNpgIzxz_4Fu1C3hdfsuTHwVwKQ3
Эта команда сохранит наш ключ авторизации для серверов ngrok по следа пути
в файлы конфигурации ямл:
    /home/serg/.ngrok2/ngrok.yml
После в файле ngrok.yml будут записаны след строки:
    authtoken : 1dTAdyznXV501tyHdfgVxPfghGNpgIzxz_4Fu1C3hdfsuTHwVwKQ3

Благодаря этому мы получим возможность http аутентификации, создадим сайт и выложим
в открытый доступ со след логин:пароль
    Пример: ngrok http -auth "user:password" 80
    Реальн: ngrok http -auth "serg:Irem" 5002

Полезная статья:
    https://xakep.ru/2013/07/23/60957/
'''

'''
SQLAlchemy - ORM для маппинга и связывания таблиц с моделями в Python.
Jinja2 - шаблонизатор для динамического создания страниц html.
Flask по стандарту в отличии от Django не дает инстрементов по работе с формами.
но для Flask можно использовать внешнюю библиотеку Flask WTF.

Djacngo имеет свою админ панель, Flask требует подключения внешних библ-к типа Flask-Admin


'''

from flask import Flask

app = Flask(__name__)
@app.route("/")
def hello():
    return "Привет Мир!"
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5002) #запустить на порту 5000
    # app.run(debug=True, port=5000) #запустить в тестовом режиме на порту 5000

# Forwarding http://7e9ea9dc.ngrok.io -> 127.0.0.1:5000
# ./ngrok http 5000







